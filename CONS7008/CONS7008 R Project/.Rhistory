## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
copperLocations <- c(1.5, 4.5)                 ## Horizontal locations for the copper levels
## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
copperLocations <- c(1.5, 2.5)                 ## Horizontal locations for the copper levels
## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration,
method = "jitter",                      ## Add random horizontal jitter to the data points
vertical = TRUE,                        ## Arrange the real data measurements vertically
col = c("blue", "blue", "darkgreen", "darkgreen"),   ## Choose plot symbol colours
pch = c(1, 3),                        ## Choose plot characters
xaxt = "n"))                          ## Turn off x-axis labelling
copperLocations <- c(1.5, 3.5)                 ## Horizontal locations for the copper levels
spermLocations <- 1:4                          ## Horizontal locations for the sperm levels
## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
axis(side = 1, at = spermLocations, labels = spermLevels, tick = FALSE, line = 0.2, cex.axis = 1.2)
text(2.5, 110, "The effects of copper and sperm concentration upon fertilization success", xpd = TRUE, cex = 1.5)
## 1. Define the CIs to be plotted
groups <- with(preloaded_data_1, split(fertilisation_success, paste(sperm_concentration, as.factor(copper_concentration))))
means <- sapply(groups, mean)   ## Calculate mean of each subgroup
var <- sapply(groups, var)      ## Calculate a variance within each group
n <- sapply(groups, length)     ## Calculate a sample size within each group
se <- sqrt(var/n)               ## Convert variance to standard error, within each group
## 2. Set locations for the CIs
xvals <- 1:4
## 3. plot the means
points(xvals, means, pch=16, cex=1.5, col = "black")
## 4. Add CIs to the graph
arrows(xvals, means - 1.96 * se, xvals, means + 1.96 * se, length = 0.15, angle = 90, code = 3, col = "black")
## Coordinates along the horizontal axis for the statistics
Time <- 1:5
## Means to put at those points for two groups
mean_size_crowded <- c(7.4, 98, 851, 7222, 54347)
mean_size_cleared <- c(6.8, 104, 846, 9742, 102314)
## Standard errors for those means for two groups
se_crowded <- c(0.5958, 7.8905, 68.5185, 581.4815, 4375.7649)
se_cleared <- c(0.5475, 8.3736, 68.1159, 784.3800, 8237.8422)
## Error bars for those means (remember, 1.96 standard errors is the approximate boundary of the rejection zone in the t distribution!)
yupper_cleared <- mean_size_cleared + 1.96*se_cleared
ylower_cleared <- mean_size_cleared - 1.96*se_cleared
yupper_crowded <- mean_size_crowded + 1.96*se_crowded
ylower_crowded <- mean_size_crowded - 1.96*se_crowded
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## Add a second line graph to the image
points(Time, mean_size_cleared, type = "b", col = "red")
## Add a second line graph to the image
points(Time, mean_size_cleared, col = "red")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## Add a second line graph to the image
points(Time, mean_size_cleared, col = "red")
## Add error bars to the means appearing on the graph
arrows(Time, yupper_cleared, Time, ylower_cleared, length = 0.05, angle = 90, code = 3, col = "red")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## Add error bars to the means appearing on the graph
arrows(Time, yupper_cleared, Time, ylower_cleared, length = 0.05, angle = 90, code = 3, col = "red")
arrows(Time, yupper_crowded, Time, ylower_crowded, length = 0.05, angle = 90, code = 3, col = "blue")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## Coordinates along the horizontal axis for the statistics
Time <- 1:5
## Means to put at those points for two groups
mean_size_crowded <- c(7.4, 98, 851, 7222, 54347)
mean_size_cleared <- c(6.8, 104, 846, 9742, 102314)
## Standard errors for those means for two groups
se_crowded <- c(0.5958, 7.8905, 68.5185, 581.4815, 4375.7649)
se_cleared <- c(0.5475, 8.3736, 68.1159, 784.3800, 8237.8422)
## Error bars for those means (remember, 1.96 standard errors is the approximate boundary of the rejection zone in the t distribution!)
yupper_cleared <- mean_size_cleared + 1.96*se_cleared
ylower_cleared <- mean_size_cleared - 1.96*se_cleared
yupper_crowded <- mean_size_crowded + 1.96*se_crowded
ylower_crowded <- mean_size_crowded - 1.96*se_crowded
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## Add a second line graph to the image
points(Time, mean_size_cleared, type = "b", col = "red")
## Add error bars to the means appearing on the graph
arrows(Time, yupper_cleared, Time, ylower_cleared, length = 0.05, angle = 90, code = 3, col = "red")
arrows(Time, yupper_crowded, Time, ylower_crowded, length = 0.05, angle = 90, code = 3, col = "blue")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "I", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "i", ylab = "Mean size")
?plot
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "L", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "n", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "n", ylab = "Mean size")
## Add a second line graph to the image
points(Time, mean_size_cleared, type = "b", col = "red")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "U", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "n", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "L", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "C", ylab = "Mean size")
## Draw the line graph using the data for "mean_size_crowded"
plot(Time, mean_size_crowded, type = "b", col = "blue", ylim = c(0, 120000), bty = "l", ylab = "Mean size")
## First, fit a model
fit <-  lm(fertilisation_success ~ sperm_concentration * as.factor(copper_concentration), data=preloaded_data_1)
DF <- fit$df.residual     ## Extract the degrees of freedom
VAR <- summary(fit)$sigma^2   ## Extract residual variance
## Define the groups for which a summary statistic is to be calculated
groups <- with(preloaded_data_1, split(fertilisation_success, paste(sperm_concentration, as.factor(copper_concentration))))
## Set up the plot parameters
means <- sapply(groups, mean)    ## Calculate the mean of each subgroup
n <- sapply(groups, length)      ## Calculate a sample size within each subgroup
se <- sqrt(VAR/n)                ## Convert variance to standard error, within each subgroup
t <- qt(0.975, df = DF)          ## Define a 95% confidence interval using the t-distribution
width = t * se                   ## Set the width of each error bar
xloc <- seq(1:length(groups))    ## Places along the X-axis to graph the means
xlab <- names(groups)            ## Define X-axis labels
library(gplots)                  ## Load the library containing the 'plotCI' program
## Construct the plot
plotCI(xloc, means, uiw = width, gap = 0.1, xlim = c(min(xloc) - 0.5, max(xloc) + 0.5),
xlab = "", xaxt = "n")
axis(side = 1, at = xloc, labels = xlab, cex.axis = 1.5)
lines(xloc, means)
#9.1.5. Adding a curve to a graph
H <- hist(preloaded_data_1$fertilisation_success)
## Calculate the sample mean and store it as "av"
av <- mean(preloaded_data_1$fertilisation_success)
## Calculate the sample standard deviation and store it as "stdev"
stdev <- sd(preloaded_data_1$fertilisation_success)
## Define the range of curve
x <- seq(min(preloaded_data_1$fertilisation_success), max(preloaded_data_1$fertilisation_success), length = 40)
## Calculate height of the Gaussian curve at each 'x'
y <- dnorm(x, av, stdev)
## Rescale those numbers to the Y-axis of the histogram
y <- y * diff(H$mids[1:2]) * nrow(preloaded_data_1)
## Plot the curve
lines(x, y, col = "red", lwd = 2)
?par
##9.1.Histograms
hist(preloaded_data_1$fertilisation_success)   ## Basic (default) histogram
#9.1.1. Extracting data from graphics commands
H <- hist(preloaded_data_1$fertilisation_success)  ## Save information about the histogram
names(H)                          ## Look at the elements of 'H'
H$mids                            ## View the contents of an element
rm(list = ls())
##Practical 9: Data visualisation
preloaded_data_1 <- read.csv("Data/preloaded_data_1.csv", header=TRUE)
##9.1.Histograms
hist(preloaded_data_1$fertilisation_success)   ## Basic (default) histogram
#9.1.1. Extracting data from graphics commands
H <- hist(preloaded_data_1$fertilisation_success)  ## Save information about the histogram
names(H)                          ## Look at the elements of 'H'
H$mids                            ## View the contents of an element - mid points of each bin
#9.1.2. Break points
hist(preloaded_data_1$fertilisation_success, breaks = seq(0, 100, by = 20)) ## Fewer bins
## What did seq do? Try intervals of 10:
seq(0, 100, by = 10)
## Try different sized bins!
hist(preloaded_data_1$fertilisation_success, breaks = c(0, 40, 60, 70, 80, 90, 100), col = "pink")
## Play with colour
hist(preloaded_data_1$fertilisation_success, col = rainbow(10), border = "blue")
#9.1.3. Labels
hist(preloaded_data_1$fertilisation_success, main = "My histogram", xlab = "Fertilisation Success", ylab = "Frequency", col = "grey")
## First, re-draw the histogram but remove some default settings
hist(preloaded_data_1$fertilisation_success, ylab = "", xlab = "", xaxt = "n", main = "")
## Add text at the XY coordinates: -15, 23
text(-15, 21, "Distribution of fertilization success in" ~ italic("Galeolaria caespitosa"), pos = 4, xpd = TRUE, cex = 1.3)
## Add text to the horizontal axis (side 1)
mtext("Fertilization success", side = 1, line = 2.4, cex = 1.1)
## Position some text above the vertical axis
text(-3.0, 15.5, "Frequency of \n fertilization \n success", pos = 3, xpd = T, cex = 1.1)
## Define locations for the x-axis
xloc <- seq(0, 100, by = 10)
## Define locations for the x-axis
xloc <- seq(0, 100, by = 10)
## Print values along the x-axis at those locations
axis(side = 1, at = xloc + 5, labels = xloc, cex = 1.0, cex.axis = 1.2)
#9.1.5. Adding a curve to a graph
H <- hist(preloaded_data_1$fertilisation_success)
## Calculate the sample mean and store it as "av"
av <- mean(preloaded_data_1$fertilisation_success)
## Calculate the sample standard deviation and store it as "stdev"
stdev <- sd(preloaded_data_1$fertilisation_success)
## Define the range of curve
x <- seq(min(preloaded_data_1$fertilisation_success), max(preloaded_data_1$fertilisation_success), length = 40)
## Calculate height of the Gaussian curve at each 'x'
y <- dnorm(x, av, stdev)
## Rescale those numbers to the Y-axis of the histogram
y <- y * diff(H$mids[1:2]) * nrow(preloaded_data_1)
## Plot the curve
lines(x, y, col = "red", lwd = 2)
#9.1.5. Adding a curve to a graph
H <- hist(preloaded_data_1$fertilisation_success)
## Calculate the sample mean and store it as "av"
av <- mean(preloaded_data_1$fertilisation_success)
## Calculate the sample standard deviation and store it as "stdev"
stdev <- sd(preloaded_data_1$fertilisation_success)
## Define the range of curve
x <- seq(min(preloaded_data_1$fertilisation_success), max(preloaded_data_1$fertilisation_success), length = 40)
## Calculate height of the Gaussian curve at each 'x'
y <- dnorm(x, av, stdev)
## Rescale those numbers to the Y-axis of the histogram
y <- y * diff(H$mids[1:2]) * nrow(preloaded_data_1)
## Plot the curve
lines(x, y, col = "red", lwd = 2)
#9.1.6 Multiple graphs
par(mfrow = c(2, 1))                   ## Sets up space for two plots (2 rows, 1 column)
bins <- seq(0, 100, by = 20)
sub <- preloaded_data_1[preloaded_data_1$copper_concentration == 0, ]
hist(sub$fertilisation_success, breaks = bins, main = "Copper Concentration = 0 mg/L")
sub <- preloaded_data_1[preloaded_data_1$copper_concentration == 50, ]
hist(sub$fertilisation_success, breaks = bins, main = "Copper Concentration = 50 mg/L")
dev.off()    ## Reset default
#Exercise
library(datasets)
data(iris)
hist(iris$Sepal.Length, breaks = c(2,4,6,8))
## 1. Calculate the means for each group
## Split data into groups
groups <- split(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration)
## Calculate the mean for each group
means <- sapply(groups, mean)
## 2. Plotting the means
my.barplot <- barplot(means,          ## Set heights of bars
beside = TRUE,                        ## Put bars side-by-side
names.arg = c("High", "Low"),         ## Labels for the X-axis
ylab = "mean Fertilization Success",  ## Title for the Y-axis
xlab = "Sperm concentration",         ## Title for the X-axis
col = c("grey60", "grey90"),          ## Set colours for the bars
ylim = c(0, 80))                      ## Make the Y-axis go to 80 - limit of y
## 3. Add confidence intervals
## Calculate a variance within each group
var <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, var)
## Calculate a sample size within each group
n <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, length)
## Convert variance to standard error, within each group
se <- sqrt(var/n)
## Draw each error bar as a "double headed arrow" that has a 90 degree angle between "head" and "stem"
arrows(my.barplot, means - 1.96 * se, my.barplot, means + 1.96 * se, code = 3, angle = 90)
## Draw each error bar as a "double headed arrow" that has a 90 degree angle between "head" and "stem"
arrows(my.barplot, means - 1.96 * se, my.barplot, means + 1.96 * se, code = 3, angle = 80)
## 2. Plotting the means
my.barplot <- barplot(means,          ## Set heights of bars
beside = TRUE,                        ## Put bars side-by-side
names.arg = c("High", "Low"),         ## Labels for the X-axis
ylab = "mean Fertilization Success",  ## Title for the Y-axis
xlab = "Sperm concentration",         ## Title for the X-axis
col = c("grey60", "grey90"),          ## Set colours for the bars
ylim = c(0, 80))                      ## Make the Y-axis go to 80 - limit of y
## 3. Add confidence intervals
## Calculate a variance within each group
var <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, var)
## Calculate a sample size within each group
n <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, length)
## Convert variance to standard error, within each group
se <- sqrt(var/n)
## Draw each error bar as a "double headed arrow" that has a 90 degree angle between "head" and "stem"
arrows(my.barplot, means - 1.96 * se, my.barplot, means + 1.96 * se, code = 3, angle = 30)
## Draw each error bar as a "double headed arrow" that has a 90 degree angle between "head" and "stem"
arrows(my.barplot, means - 1.96 * se, my.barplot, means + 1.96 * se, code = 3, angle = 90)
## 2. Plotting the means
my.barplot <- barplot(means,          ## Set heights of bars
beside = TRUE,                        ## Put bars side-by-side
names.arg = c("High", "Low"),         ## Labels for the X-axis
ylab = "mean Fertilization Success",  ## Title for the Y-axis
xlab = "Sperm concentration",         ## Title for the X-axis
col = c("grey60", "grey90"),          ## Set colours for the bars
ylim = c(0, 80))                      ## Make the Y-axis go to 80 - limit of y
## 3. Add confidence intervals
## Calculate a variance within each group
var <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, var)
## Calculate a sample size within each group
n <- tapply(preloaded_data_1$fertilisation_success, preloaded_data_1$sperm_concentration, length)
## Convert variance to standard error, within each group
se <- sqrt(var/n)
## Draw each error bar as a "double headed arrow" that has a 90 degree angle between "head" and "stem"
arrows(my.barplot, means - 1.96 * se, my.barplot, means + 1.96 * se, code = 3, angle = 90)
##9.3. Scatter plots
FingerData <- read.csv("Data/FingerData.csv", header = TRUE)
plot(FingerData$ring, FingerData$index)  # Make the scatter plot
plot(FingerData$index, FingerData$ring,
main = "Plotting one finger against another",
xlab = "Index finger length (mm)",
ylab = "Ring finger length (mm)")
## Make the plot but turn off all settings (plot will be blank)
plot(FingerData$index, FingerData$ring,
type = "n", xaxt = "n", yaxt = "n", bty = "n", main = "", xlab = "", ylab = "")
##9.3. Scatter plots
FingerData <- read.csv("Data/FingerData.csv", header = TRUE)
plot(FingerData$ring, FingerData$index)  # Make the scatter plot
plot(FingerData$index, FingerData$ring,
main = "Plotting one finger against another",
xlab = "Index finger length (mm)",
ylab = "Ring finger length (mm)")
##9.3. Scatter plots
FingerData <- read.csv("Data/FingerData.csv", header = TRUE)
plot(FingerData$ring, FingerData$index)  # Make the scatter plot
plot(FingerData$index, FingerData$ring,
main = "Plotting one finger against another",
xlab = "Index finger length (mm)",
ylab = "Ring finger length (mm)")
## Make the plot but turn off all settings (plot will be blank)
plot(FingerData$index, FingerData$ring,
type = "n", xaxt = "n", yaxt = "n", bty = "n", main = "", xlab = "", ylab = "")
## Add points for females
with(FingerData, points(index[gender == 'f'], ring[gender == 'f'], pch = 1))
## Add points for males
with(FingerData, points(index[gender == 'm'], ring[gender == 'm'], col = "green", pch = 3))
legend(55, 100, legend = c("Female", "Male"), col = c("black", "green"), pch = c(1, 3))
## Make the plot but turn off all settings (plot will be blank)
plot(FingerData$index, FingerData$ring,
type = "n", xaxt = "n", yaxt = "n", bty = "n", main = "", xlab = "", ylab = "")
## Add points for females
with(FingerData, points(index[gender == 'f'], ring[gender == 'f'], pch = 1))
## Add points for males
with(FingerData, points(index[gender == 'm'], ring[gender == 'm'], col = "green", pch = 3))
legend(55, 100, legend = c("Female", "Male"), col = c("black", "green"), pch = c(1, 3))
## Manually print values along the horizontal axis
axis(side = 1, cex.axis = 1.2)
## Manually print values along the vertical axis
axis(side = 2, cex.axis = 1.2)
##  Manually add a title on the horizontal axis
mtext("Length of index finger (mm)", side = 1, line = 2.4, cex = 1.1)
##  Manually add a title on the vertical axis
mtext("Length of ring finger (mm)", side = 2, line = 2.4, cex = 1.1)
## Add main heading
text(70, 110, ~bold("Association between finger lengths"), xpd = TRUE, cex = 1.5)
## fit a simple linear regression
finger_mod<-lm(ring ~ index, data=FingerData)
## Add a line of best fit (regression line)
abline(coef(finger_mod), col = "turquoise", lwd = 2)
## or we could use the FAR MORE VERSATILE curve() function!!!
curve(cbind(1,x)%*%coef(finger_mod), add = T, col = "dodgerblue4", lwd = 3, lty=3)
##9.3.1 Extensions to more than one quantitative variable
OzonePollution <- read.csv("Data/OzonePollution.csv", header = TRUE)
pairs(OzonePollution)  ## Generate every possible 2D scatterplot among the columns
##9.4 Strip charts
plot(preloaded_data_1$copper_concentration, preloaded_data_1$fertilisation_success)
stripchart(preloaded_data_1$fertilisation_success ~ preloaded_data_1$copper_concentration, method = "jitter", vertical = TRUE)
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration, method = "jitter", vertical = TRUE))
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration,
method = "jitter",                      ## Add random horizontal jitter to the data points
vertical = TRUE,                        ## Arrange the real data measurements vertically
col = c("blue", "blue", "darkgreen", "darkgreen"),   ## Choose plot symbol colours
pch = c(1, 3),                        ## Choose plot characters
xaxt = "n"))                          ## Turn off x-axis labelling
##9.4 Strip charts
plot(preloaded_data_1$copper_concentration, preloaded_data_1$fertilisation_success)
stripchart(preloaded_data_1$fertilisation_success ~ preloaded_data_1$copper_concentration, method = "jitter", vertical = TRUE)
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration, method = "jitter", vertical = TRUE))
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration,
method = "jitter",                      ## Add random horizontal jitter to the data points
vertical = TRUE,                        ## Arrange the real data measurements vertically
col = c("blue", "blue", "darkgreen", "darkgreen"),   ## Choose plot symbol colours
pch = c(1, 3),                        ## Choose plot characters
xaxt = "n"))                          ## Turn off x-axis labelling
copperLocations <- c(1.5, 3.5)                 ## Horizontal locations for the copper levels
spermLocations <- 1:4                          ## Horizontal locations for the sperm levels
copperLevels <- c("0 mg/L", "50 mg/L")         ## Define the text of the copper levels
spermLevels <- c("High", "Low", "High", "Low") ## Define the text of the sperm levels
## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
axis(side = 1, at = spermLocations, labels = spermLevels, tick = FALSE, line = 0.2, cex.axis = 1.2)
text(2.5, 110, "The effects of copper and sperm concentration upon fertilization success", xpd = TRUE, cex = 1.5)
## 1. Define the CIs to be plotted
groups <- with(preloaded_data_1, split(fertilisation_success, paste(sperm_concentration, as.factor(copper_concentration))))
means <- sapply(groups, mean)   ## Calculate mean of each subgroup
var <- sapply(groups, var)      ## Calculate a variance within each group
n <- sapply(groups, length)     ## Calculate a sample size within each group
se <- sqrt(var/n)               ## Convert variance to standard error, within each group
## 2. Set locations for the CIs
xvals <- 1:4
## 3. plot the means
points(xvals, means, pch=16, cex=1.5, col = "black")
## 4. Add CIs to the graph
arrows(xvals, means - 1.96 * se, xvals, means + 1.96 * se, length = 0.15, angle = 90, code = 3, col = "black")
##9.4 Strip charts
plot(preloaded_data_1$copper_concentration, preloaded_data_1$fertilisation_success)
stripchart(preloaded_data_1$fertilisation_success ~ preloaded_data_1$copper_concentration, method = "jitter", vertical = TRUE)
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration, method = "jitter", vertical = TRUE))
with(preloaded_data_1, stripchart(fertilisation_success ~ copper_concentration + sperm_concentration,
method = "jitter",                      ## Add random horizontal jitter to the data points
vertical = TRUE,                        ## Arrange the real data measurements vertically
col = c("blue", "blue", "darkgreen", "darkgreen"),   ## Choose plot symbol colours
pch = c(1, 3),                        ## Choose plot characters
xaxt = "n"))                          ## Turn off x-axis labelling
copperLocations <- c(1.5, 3.5)                 ## Horizontal locations for the copper levels
spermLocations <- 1:4                          ## Horizontal locations for the sperm levels
copperLevels <- c("0 mg/L", "50 mg/L")         ## Define the text of the copper levels
## Print those values along the horizontal axis
axis(side = 1, at = copperLocations, labels = copperLevels, tick = FALSE, line = 2.5, cex.axis = 1.2)
axis(side = 1, at = spermLocations, labels = spermLevels, tick = FALSE, line = 0.2, cex.axis = 1.2)
text(2.5, 110, "The effects of copper and sperm concentration upon fertilization success", xpd = TRUE, cex = 1.5)
## 1. Define the CIs to be plotted
groups <- with(preloaded_data_1, split(fertilisation_success, paste(sperm_concentration, as.factor(copper_concentration))))
means <- sapply(groups, mean)   ## Calculate mean of each subgroup
var <- sapply(groups, var)      ## Calculate a variance within each group
n <- sapply(groups, length)     ## Calculate a sample size within each group
se <- sqrt(var/n)               ## Convert variance to standard error, within each group
## 2. Set locations for the CIs
xvals <- 1:4
## 3. plot the means
points(xvals, means, pch=16, cex=1.5, col = "black")
?cẽ
?cex
?par
#Practical 10: Principal Component Analysis
##10.1. Simple correlated data
zebrafish <- read.csv("Data/zebrafish.csv")
#Practical 10: Principal Component Analysis
##10.1. Simple correlated data
zebrafish <- read.csv("Data/zebrafish.csv")
head(zebrafish) #have a look at the data - we will initially work with just the first two of the continuous variables ("TotalLength" and "TailDepth")
## Now produce a "scatter plot"
with(raw_data, plot(TotalLength, TailDepth, xlab="Y1", ylab= "Y2")) ## Scatter plot the two variables
raw_data<-as.data.frame(zebrafish[,c("TotalLength", "TailDepth")]) #subset the data to two columns, and tell R that it is a dataframe
## Now produce a "scatter plot"
with(raw_data, plot(TotalLength, TailDepth, xlab="Y1", ylab= "Y2")) ## Scatter plot the two variables
std_function<-function(x) ((x-mean(x, na.rm=T)) / sd(x, na.rm=T))
## make a copy of raw data before we standardise the variables
std_data<-raw_data
## now standardise the two variables using our flash new function!
std_data$TotalLength<-std_function(x=std_data$TotalLength)
std_data$TailDepth<-std_function(x=std_data$TailDepth)
## Now plot the standardised variables
with(std_data, plot(TotalLength, TailDepth, xlab="Y1", ylab= "Y2")) ## Scatter plot the two variables
cov_mat <- round(var(std_data), 3)  ## Estimate the sample covariance matrix
cov_mat         ## Look at the sample variances (diagonals) and the covariance (off diagonal)
PCA <- eigen(cov_mat)           ## Calculate eigenvalues and eigenvectors
round(PCA$values, 3)            ## Look at the eigenvalues
round(PCA$vectors, 2)           ## Look at the eigenvectors
cov_mat(raw_data)
cor(raw_data)
cov(raw_data)
var(raw_data)
##10.3 Principal Components (Eigenvectors)
## Make the plot dimensions square ("s") to help us to visualise the new axes
par(pty = "s")
## Set the range for the two axes
AxisRange <- range(std_data)
## Plot our standardised variables again
plot(x = std_data$TotalLength,  y = std_data$TailDepth, ## Plot the two variables
xlim = AxisRange,        ## Set the range of Y1 values
ylim = AxisRange,        ## Set the range of Y2 values to be identical to the range of Y2 values
xlab = "TotalLength (std)",    #label the axes to so you remember what we are plotting
ylab = "TailDepth (std)")
## Now plot straight lines that go through the origin (0, 0)
## and the coordinates of the eigenvectors (one at a time)
## Recall that the slope of a straight line is equal to the rise/run:
abline(0, PCA$vectors[2, 1]/PCA$vectors[1, 1], col = "red")   ## Plot a line the for the first PC in red
abline(0, PCA$vectors[2, 2]/PCA$vectors[1, 2], col = "blue")  ## Plot a line the for the second PC in blue
## Reset the plot dimensions
par(pty = "m")
test<-princomp(std_data)
loading(test)
loadings(test)
summary(test)
test<-princomp(std_data)
loadings(test)
summary(test)
PCA$vectors
## Step 1: multiply fish 1's value for Y1 by PC1's loading for Y1
std_data$TotalLength[1] * PCA$vectors[1, 1]
## Step 1: multiply fish 1's value for Y2 by PC1's loading for Y2
std_data$TailDepth[1] * PCA$vectors[2, 1]
## Step 3, sum the two products to calculate the PC1 score for the 1st fish in the dataset
std_data$TotalLength[1] * PCA$vectors[1, 1]  + std_data$TailDepth[1] * PCA$vectors[2, 1]
PC_scores <- as.matrix(std_data) %*% PCA$vectors ## calculate PC scores for all objects and PCs
colnames(PC_scores)=c("PC1", "PC2")
head(PC_scores)   ## Look at the first six objects
cov_matPCA <- var(PC_scores)  ## Calculate the covariance matrix and store it
round(cov_matPCA, 3)  ## Look at the variance covariance matrix of PC_scores
Range <- range(std_data, PC_scores) ## Prepare the plotting range
par(mfcol = c(1, 2))                ## Set up space for two graphs, side by side
plot(x = std_data$TotalLength,  y = std_data$TailDepth,  ## Plot the original data
xlim = Range,          ## Set the axes range
ylim = Range,              ## Set the axes range
xlab = 'TotalLength',      ## Label the vertical axis
ylab = 'TailDepth')           ## Label the horizontal axis
plot(PC_scores[, 1], PC_scores[, 2],    ## Plot the new data
xlim = Range,            ## Set the axes range
ylim = Range,              ## Set the axes range
xlab = 'First principal component',            ## Label the vertical axis
ylab = 'Second principal component')       ## Label the horizontal axis
par(mfcol = c(1, 1))                    ## Reset to just one graph per page
PC_scores
head(PC_scores)   ## Look at the first six objects
## Sum of the variances (i.e. total variance)
## We can grab the variances from the "diagonal" of the covariance matrix!
sum(diag(cov_mat))
## Sum the eigenvalues
PCA$values[1] + PCA$values[2]
PCA$values
PCA$vectors
##10.6 Zero eigenvalue
## Make sure R treats this as a dataframe
std_data <- as.data.frame(std_data)
## Generate a new, third variable, that is totally determined by the first variable
std_data$Y3 <- std_data$TotalLength ## Copy the data from the first column into a new column
pairs(std_data) ## Scatterplot each raw data variable against every other
cor(std_data)   ## Look at the correlation matrix
cov_mat2 <-  var(std_data)      ## Estimate the sample covariance matrix
PCA2 <- eigen(cov_mat2)   ## Extract the eigenvalues and eigenvectors
round(PCA2$values, 4)       ## Look at the eigenvalues
PC_scores <- as.matrix(std_data) %*% PCA2$vectors  ## Convert the data to PC_scores
round(var(PC_scores), 4)
biplot(test, col=c("grey","red"))
rm(list = ls())
