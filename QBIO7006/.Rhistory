s[i,j] = 2
} else {
s[i,j] = -2
}
value_1 = H[i,j] + s[i,j]
value_2 = max(H[i:1, j+1] + (1:(i-1)) * (-1))
value_3 = max(H[i+1, j:1] + (1:(j-1)) * (-1))
H[i+1,j+1] = max(value_1, value_2, value_3, 0)
}
}
(o:(9))
(0:9)
tmp =[2,3,4,5]
tmp = (2,3,4,5)
tmp=list(2,3,4,5)
tmp=matrix[1:8, 2, 4]
tmp=matrix(1:8, 2, 4)
tmp
tmp[4:1,2]
tmp[3:1,2]
tmp=matrix(1:8, 2, 4)
tmp[4:1,2]
tmp[,2]
tmp[2,4:1]
tmp[2,4:1]+(1:4)*(-1)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:length(aList))){
for (j in (2: length(bList))){
if (aList[i] == bList[j]){
s[i,j] = 2
} else {
s[i,j] = -2
}
value_1 = H[i-1,j-1] + s[i,j]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
View(H)
View(s)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:length(aList)+1)){
for (j in (2: length(bList)+1)){
if (aList[i] == bList[j]){
s[i,j] = 2
} else {
s[i,j] = -2
}
value_1 = H[i-1,j-1] + s[i,j]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:length(aList)+1)){
for (j in (2: length(bList)+1)){
if (aList[i] == bList[j]){
s[i,j] = 2
} else {
s[i,j] = -2
}
value_1 = H[i-1,j-1] + s[i,j]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:length(aList)+1)){
for (j in (2: length(bList)+1)){
if (aList[i] == bList[j]){
value_1 = H[i-1,j-1] + 2
} else {
value_1 = H[i-1,j-1] - 2
}
value_1 = H[i-1,j-1] + s[i,j]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
2:length(aList)+1
nchar(aList)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:length(aList)+1)){
for (j in (2: length(bList)+1)){
if (aList[i] == bList[j]){
value_1 = H[i-1,j-1] + 2
} else {
value_1 = H[i-1,j-1] - 2
}
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
nrow(H)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i] == bList[j]){
s[i,j] = 2
} else {
s[i,j] = -2
}
value_1 = H[i-1,j-1] + s[i,j]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
View(s)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList), length(bList))
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i] == bList[j]){
s[i-1,j-1] = 2
}else {
s[i-1,j-1] = -2
}
value_1 = H[i-1,j-1] + s[i-1,j-1]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
i=2
View(s)
j=9
aList[i]
bList[j]
bList
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
s = matrix(0, length(aList), length(bList))
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i-1] == bList[j-1]){
s[i-1,j-1] = 2
}else {
s[i-1,j-1] = -2
}
value_1 = H[i-1,j-1] + s[i-1,j-1]
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0)
}
}
View(H)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i-1] == bList[j-1]){
value_1 = H[i-1,j-1] + 2
}else {
value_1 = H[i-1,j-1] - 2
}
value_2 = max(H[(i-1):1, j] + (1:(i-1)) * (-1))
value_3 = max(H[i, (j-1):1] + (1:(j-1)) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0L)
}
}
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i-1] == bList[j-1]){
value_1 = H[i-1,j-1] + 2
}else {
value_1 = H[i-1,j-1] - 2
}
value_2 = max(H[(i-1):1, j] + 1:(i-1) * (-1))
value_3 = max(H[i, (j-1):1] + 1:(j-1) * (-1))
H[i,j] = max(value_1, value_2, value_3, 0L)
}
}
a = "CAGCGGC"
b = "CATCGGTC"
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i-1] == bList[j-1]){
value_1 = H[i-1,j-1] + 2
}else {
value_1 = H[i-1,j-1] - 2
}
value_2 = max(H[(i-1):1, j] + 1:(i-1) * (-10))
value_3 = max(H[i, (j-1):1] + 1:(j-1) * (-10))
H[i,j] = max(value_1, value_2, value_3, 0L)
}
}
algorithmSmithWaterman <- function(a, b, match_score, mismatch_score, gap_score){
aList = strsplit(a, "")[[1]]
bList = strsplit(b, "")[[1]]
H = matrix(0, length(aList)+1, length(bList)+1)
for (i in (2:nrow(H))){
for (j in (2: ncol(H))){
if (aList[i-1] == bList[j-1]){
value_1 = H[i-1,j-1] + match_score
}else {
value_1 = H[i-1,j-1] + mismatch_score
}
value_2 = max(H[(i-1):1, j] + 1:(i-1) * gap_score)
value_3 = max(H[i, (j-1):1] + 1:(j-1) * gap_score)
H[i,j] = max(value_1, value_2, value_3, 0L)
}
}
return (H)
}
result = algorithmSmithWaterman(a, b, 2, -2, -1)
View(result)
#4.1 Adding a continuous predictor variable ------
plot(d2$weight, d2$height, ylab = "Adult height (cm)", xlab = "Adult weight (kg)")
#3.2 A Gaussian model of height -----
library(tidyverse)
d<-read_csv("data/iKung_HeightWeight.csv")
#3.2 A Gaussian model of height -----
library(tidyverse)
d<-read_csv("Desktop/Courses/QBIO7005/data/iKung_HeightWeight.csv")
head(d)
tail(d)
str(d)
d2 <- d %>% filter(age>=18)
dim(d2)
hist(d2$height,breaks = 20,freq=F,ylim=c(0,0.1),main="Histogram of Adult Height",xlab="height (cm)")
meanGuess <- 155
sdGuess <-10
curve((1/(sdGuess * sqrt(2 * pi))) * exp(-0.5 * ((x - meanGuess) / sdGuess)^2),
add = TRUE, col = "red", lwd = 2)
meanHeight <- mean(d2$height, na.rm = T)
sdHeight <- sd(d2$height, na.rm = T)
#3.4 Fitting the model in R -----
# Using Ordinary Least Squares estimate
m1 <- lm(height~1,data=d2) # this is the R syntax for fitting a linear model with Gaussian errors. The syntax "height~1", and without the addition of predictor variables, means that we are fitting an 'intercept-only' or constants-only model.
summary(m1) # this provides a summary of the model fit, including parameter estimates.
str(summary(m1))
m1Summary = summary(m1)
m1Summary$coefficients
m1Summary$sigma
# Using maximum likelihood estimation
{
normalF <- function(parvec) {
# Log of likelihood of a normal distribution
# parvec[1] - mean
# parvec[2] - standard deviation
# x - set of observations. Should be initialized before MLE
sum ( -0.5* log(parvec[2]) - 0.5*(x - parvec[1])^2/parvec[2] )
}
x = c(1,2,3,4) # set of observations
normalF(c(1,1)) # log likelihood function value for given x and mu=sd=1
}
library(bbmle)
x <- na.omit(d2$height)
m <- mle2(x~dnorm(mean=mu,sd=sd),start=list(mu=145,sd=6),data=data.frame(x))
m
confint(m)
#4.1 Adding a continuous predictor variable ------
plot(d2$weight, d2$height, ylab = "Adult height (cm)", xlab = "Adult weight (kg)")
m1 <- lm(formula = height ~ weight, data=d2) # assign a linear model (lm) fit to the object 'm1'. We are modeling height as a function of weight. The `lm` command assumes a normally distributed data (i.e. that a normal likelihood is justified)
m1.sum <- summary(m1)
plot(d2$weight, d2$height, ylab = "Adult height (cm)", xlab = "Adult weight (kg)")
abline(lm(height ~ weight, data = d2), col = "red")
str(m1)
plot(m1$residuals ~ m1$fitted.values)
abline(h=0)
coef(m1)
newdat <- as.data.frame(59) # i.e. I would like to know the predicted height for an individual who weighs 59kg.
newdat
names(newdat) <- "weight"
predict(m1,newdata=newdat)
predict(m1,newdata=newdat,interval="p")
setwd("~/Desktop/Courses/QBIO7006")
knitr::opts_chunk$set(echo = TRUE)
norm = rnorm(100, mean=0, sd =1)
norm = rnorm(100, mean=0, sd =1)
knitr::opts_chunk$set(echo = TRUE)
norm = rnorm(100, mean=0, sd =1)
plot(norm)
plot(norm)
library(tidyverse)
library(tidyverse)
```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(boilrdata)
plot(Mass ~ MaxLifeSpan, data=marsupials)
?knitr::opts_chunk
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set()
library(boilrdata)
plot(Mass ~ MaxLifeSpan, data=marsupials)
library(knitr)
kable(head(marsupials))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
antsJapaneseData <- as.tibble(read_csv("Desktop/Courses/QBIO/QBIO7001/data/ants_Japanese_islands.csv"))
antsJapaneseData <- as.tibble(read_csv("/Users/lena/Desktop/Courses/QBIO/QBIO7001/data/ants_Japanese_islands.csv"))
antsJapaneseData <- as.tibble(read_csv("Users/lena/Desktop/Courses/QBIO/QBIO7001/data/ants_Japanese_islands.csv"))
antsJapaneseData <- as.tibble(read_csv("Users/lena/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
antsJapaneseData <- as.tibble(read_csv("Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
library(readr)
ants_Japanese_islands <- read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv")
View(ants_Japanese_islands)
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
nrow(tidyData[tidyData$Subfamily == "Formicinae",])
nrow(tidyData[tidyData$IslandName == "Hokkaido" & tidyData$Exotic == "Native", ])
range(tidyData$Lat)
length(unique(tidyData$GenusSpecies))
sharedEpithet <-tidyData |>
select(Species, Genus) |>
distinct() |>
group_by(Species) |>
summarise(n = n()) |>
filter(n>1)
nIslandsPerSpecies <- tidyData |>
group_by(GenusSpecies, Exotic) |>
summarise(nIslands = n())
ggplot(nIslandsPerSpecies) +
geom_bar(aes(nIslands)) +
theme_bw() +
facet_wrap(vars(Exotic)) +
labs(x= "Number of islands", y= "Number of species records")
nIslandsPerSpecies <- tidyData |>
group_by(GenusSpecies, Exotic) |>
summarise(nIslands = n())
gplot(combinedData) +
geom_point(aes(x= log(Area), y = nSpecies, col = Density)) +
theme_bw() +
labs(x = "log(Island area [km2])", y= "Number of recorded species", color = "Population density") +
scale_color_gradient(low="black", high="red")
library(tidyverse)
library(ggplot2)
library(stringr)
sharedEpithet <-tidyData |>
select(Species, Genus) |>
distinct() |>
group_by(Species) |>
summarise(n = n()) |>
filter(n>1)
combinedData <- nSpeciesPerIsland |>
inner_join(modNameJapaneseIsland, by = "modIslandName") |>
mutate(Density = Population/Area) |>
select(IslandName, modIslandName, nSpecies, Area, Population, Density)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
nrow(tidyData[tidyData$Subfamily == "Formicinae",])
nrow(tidyData[tidyData$IslandName == "Hokkaido" & tidyData$Exotic == "Native", ])
range(tidyData$Lat)
length(unique(tidyData$GenusSpecies))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
nrow(tidyData[tidyData$Subfamily == "Formicinae",])
nrow(tidyData[tidyData$IslandName == "Hokkaido" & tidyData$Exotic == "Native", ])
range(tidyData$Lat)
length(unique(tidyData$GenusSpecies))
sharedEpithet <-tidyData |>
select(Species, Genus) |>
distinct() |>
group_by(Species) |>
summarise(n = n()) |>
filter(n>1)
nIslandsPerSpecies <- tidyData |>
group_by(GenusSpecies, Exotic) |>
summarise(nIslands = n())
ggplot(nIslandsPerSpecies) +
geom_bar(aes(nIslands)) +
theme_bw() +
facet_wrap(vars(Exotic)) +
labs(x= "Number of islands", y= "Number of species records")
JapaneseIslandData <- read_csv("./data/Japanese_islands.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
nrow(tidyData[tidyData$Subfamily == "Formicinae",])
nrow(tidyData[tidyData$IslandName == "Hokkaido" & tidyData$Exotic == "Native", ])
range(tidyData$Lat)
length(unique(tidyData$GenusSpecies))
sharedEpithet <-tidyData |>
select(Species, Genus) |>
distinct() |>
group_by(Species) |>
summarise(n = n()) |>
filter(n>1)
nIslandsPerSpecies <- tidyData |>
group_by(GenusSpecies, Exotic) |>
summarise(nIslands = n())
ggplot(nIslandsPerSpecies) +
geom_bar(aes(nIslands)) +
theme_bw() +
facet_wrap(vars(Exotic)) +
labs(x= "Number of islands", y= "Number of species records")
JapaneseIslandData <- read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/Japanese_islands.csv")
nSpeciesPerIsland <- tidyData |>
group_by(IslandName) |>
summarise(nSpecies = n()) |>
mutate(lowerIslandName = tolower(IslandName)) |> #change to lower case
mutate(modIslandName = str_replace_all(lowerIslandName, "[^[:alnum:]]", "")) #remove all special characters
modNameJapaneseIsland <- JapaneseIslandData |>
mutate(lowerName = tolower(Name)) |> #change to lower case
mutate(modIslandName = str_replace_all(lowerName, "[^[:alnum:]]", "")) #remove all special characters
combinedData <- nSpeciesPerIsland |>
inner_join(modNameJapaneseIsland, by = "modIslandName") |>
mutate(Density = Population/Area) |>
select(IslandName, modIslandName, nSpecies, Area, Population, Density)
gplot(combinedData) +
geom_point(aes(x= log(Area), y = nSpecies, col = Density)) +
theme_bw() +
labs(x = "log(Island area [km2])", y= "Number of recorded species", color = "Population density") +
scale_color_gradient(low="black", high="red")
ggplot(combinedData) +
geom_point(aes(x= log(Area), y = nSpecies, col = Density)) +
theme_bw() +
labs(x = "log(Island area [km2])", y= "Number of recorded species", color = "Population density") +
scale_color_gradient(low="black", high="red")
antsJapaneseData <- as.tibble(read_csv("~/Desktop/Courses/QBIO/QBIO7001/R_Assignment/data/ants_Japanese_islands.csv"))
tidyData <- antsJapaneseData |>
`colnames<-` (c("Subfamily", "Genus", "Species", "Status", "Exotic", "IslandName",
"IslandGroup", "Archipelago", "BiogeographicRealm", "Lat", "Long")) |>
mutate_all(~replace(., . == "-", NA)) |>
mutate(GenusSpecies = paste(Genus, Species, sep="_"))
