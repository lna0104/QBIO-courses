N[i+1] <- N[i] + h*dN
}
return(list(times = times, solution = N))
}
# Set parameters
EulerResult <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 0.1, t = 100)
lines(EulerResult$times, EulerResult$solution, type = 'l', col = 'green')
plot(EulerResult$times, EulerResult$solution, type = 'l', col = 'green')
# Set parameters
EulerResult_5 <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 5, t = 100)
EulerResult_1 <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 1, t = 100)
EulerResult_01 <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 0.1, t = 100)
EulerResult_001 <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 0.01, t = 100)
plot(EulerResult_01$times, EulerResult_01$solution, type = 'l', col = 'red')
plot(EulerResult_5$times, EulerResult_5$solution, type = 'l', col = 'red')
lines(EulerResult_1$times, EulerResult_11$solution, type = 'l', col = 'orange')
plot(EulerResult_5$times, EulerResult_5$solution, type = 'l', col = 'red')
lines(EulerResult_1$times, EulerResult_1$solution, type = 'l', col = 'orange')
lines(EulerResult_01$times, EulerResult_01$solution, type = 'l', col = 'green')
lines(EulerResult_001$times, EulerResult_001$solution, type = 'l', col = 'blue')
lines(x = solution[,"time"], y = solution[,"N"], col = "red", lty = 3)
plot(EulerResult_5$times, EulerResult_5$solution, type = 'l', col = 'red')
lines(EulerResult_1$times, EulerResult_1$solution, type = 'l', col = 'orange')
lines(EulerResult_01$times, EulerResult_01$solution, type = 'l', col = 'green')
lines(EulerResult_001$times, EulerResult_001$solution, type = 'l', col = 'blue')
EulerResult_0001 <- EulerFunction(N0 = 1, r = 0.1, K = 1000, h = 0.001, t = 100)
plot(EulerResult_5$times, EulerResult_5$solution, type = 'l', col = 'red')
lines(EulerResult_1$times, EulerResult_1$solution, type = 'l', col = 'orange')
lines(EulerResult_01$times, EulerResult_01$solution, type = 'l', col = 'green')
lines(EulerResult_001$times, EulerResult_001$solution, type = 'l', col = 'blue')
lines(EulerResult_0001$times, EulerResult_0001$solution, type = 'l', col = 'gray')
# Task 2.2
siModel <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- - beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set time points
timePoints <- seq(0, 200, by = 1)
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.02)
iniState <- c(S = 0.99, I = 0.01, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
View(siSolution)
plot(x = solution[,"time"], y = solution[,"X"], xlab = "Time", type = "l")
plot(x = siSolution[,"time"], y = siSolution[,"S"], xlab = "Time", type = "l")
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", lty=1)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", pch="o", ylab="y", lty=1)
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y")
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", ylab="y", lty=1)
plot(x = siSolution[,"time"], y = siSolution[,"S"])
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", lty=1, xlab ='Time')
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", lty=1, xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red",lty=2)
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", xlab ='Time')
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red",lty=2)
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="dark red", lty=3)
iniState <- c(S = 1000, I = 2, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
iniState <- c(S = 1000, I = 2, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red",lty=2)
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="dark red", lty=3)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], type="o", col="blue", pch="o", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red",lty=2)
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="dark red", lty=3)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", lty=1, ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red",lty=2)
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="dark red", lty=3)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
?plot
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", lwd =1, ylab="y", xlab ='Time')
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", lwd =2, ylab="y", xlab ='Time')
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", lwd =0.1, ylab="y", xlab ='Time')
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
# Add a legend
legend(legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
?legend
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
# Task 2.2.a
siModel_a <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set time points
times <- seq(0, 200, by = 1)
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time')
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', title = "Task 2.2.a")
?plot
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
# Task 2.2.a
siModel_a <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set time points
times <- seq(0, 200, by = 1)
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
# Task 2.2.a
siModel_a <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set time points
times <- seq(0, 200, by = 1)
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel_a, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siModel_b <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("right", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siSolution <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
p1 <-plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
p1 + lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
p1 + lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
p1 + legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
p1
par(mfrow = c(1, 2))
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
par(mfrow = c(3, 1))
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
par(mfrow = c(3, 1))
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
siModel_b <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution[,"time"], y = siSolution[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution[,"time"], y = siSolution[,"I"], col="red")
lines(x = siSolution[,"time"], y = siSolution[,"R"], col="orange")
siSolution_a <- ode(iniState, times, siModel_a, parameters)
par(mfrow = c(3, 1))
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolusiSolution_ation[,"R"], col="orange")
siModel_b <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_b <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution_b[,"time"], y = siSolution_b[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"I"], col="red")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"R"], col="orange")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolusiSolution_ation[,"R"], col="orange")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolusiSolution_ation[,"R"], col="orange")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"R"], col="orange")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
par(mfrow = c(3, 1))
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a",
ylim=c(min(siSolution_a[,"S"]), max(siSolution_a[,"S"])))
par(mfrow = c(3, 1))
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a",
xlim=c(min(siSolution_a[,"time"]), max(siSolution_a[,"time"])))
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"R"], col="orange")
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siModel_b <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_b <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution_b[,"time"], y = siSolution_b[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"I"], col="red")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siModel_c <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- influx - beta*S*I - mu*S
dI <- beta*S*I - gamma*I - alpha*I - mu*I
dR <- gamma*I -  mu*R
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05, mu = 0.001, influx = 0.002)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_c <- ode(iniState, times, siModel_c, parameters)
plot(x = siSolution_c[,"time"], y = siSolution_c[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution_c[,"time"], y = siSolution_c[,"I"], col="red")
lines(x = siSolution_c[,"time"], y = siSolution_c[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
### Task 2.2.a
siModel_a <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set time points
times <- seq(0, 300, by = 1)
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_a <- ode(iniState, times, siModel_a, parameters)
plot(x = siSolution_a[,"time"], y = siSolution_a[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.a")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"I"], col="red")
lines(x = siSolution_a[,"time"], y = siSolution_a[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siModel_b <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta*S*I
dI <- beta*S*I - gamma*I - alpha*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_b <- ode(iniState, times, siModel_b, parameters)
plot(x = siSolution_b[,"time"], y = siSolution_b[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.b")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"I"], col="red")
lines(x = siSolution_b[,"time"], y = siSolution_b[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
siModel_c <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- influx - beta*S*I - mu*S
dI <- beta*S*I - gamma*I - alpha*I - mu*I
dR <- gamma*I -  mu*R
return(list(c(dS, dI, dR)))
})
}
# Set initial conditions and parameters
parameters <- c(beta = 0.3, gamma = 0.1, alpha = 0.05, mu = 0.001, influx = 0.002)
iniState <- c(S = 0.99, I = 0.1, R = 0)
siSolution_c <- ode(iniState, times, siModel_c, parameters)
plot(x = siSolution_c[,"time"], y = siSolution_c[,"S"], col="blue", type="l", ylab="y", xlab ='Time', main = "Task 2.2.c")
lines(x = siSolution_c[,"time"], y = siSolution_c[,"I"], col="red")
lines(x = siSolution_c[,"time"], y = siSolution_c[,"R"], col="orange")
# Add a legend
legend("topright", legend = c("S", "I", "R"),
col = c("red", "blue", "orange"), lty = 1)
library(ggplot2)
###2.1.b: Using the code developed in section 2.6
logisticODE <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
parameters <- c(r = 0.1, K = 1000)
iniState <- c(N = 1)
logisticSolution <- ode(iniState, times, logisticODE, parameters)
lines(x = logisticSolution[,"time"], y = logisticSolution[,"N"], col = "red", lty = 3)
### Practical tasks ------
###Task 2.1:
###2.1.a
logisticEq <- function(t, N0, r, K) {
Nt <- N0 * K * exp(r * t) / (K + N0 * (exp(r * t) - 1))
return(Nt)
}
# Set parameters
N0 <- 1
r <- 0.1
K <- 1000
# Generate time points from 0 to 100 in increments of 0.1
times<- seq(0, 100, by = 0.1)
# Calculate solution values using the logistic_solution function
solutionValues <- logisticEq(times, N0, r, K)
# Plot the solution
plot(times, solutionValues, type = 'l', col = 'blue', xlab = 'Time', ylab = 'Population Size', main = 'Logistic ODE Solution')
###2.1.b: Using the code developed in section 2.6
logisticODE <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- r * N * (1 - N/K)
return(list(c(dN)))
})
}
parameters <- c(r = 0.1, K = 1000)
iniState <- c(N = 1)
logisticSolution <- ode(iniState, times, logisticODE, parameters)
View(logisticSolution)
EulerFunction <- function(N0, r, K, h, t){
nSteps <- round(t/h)
times <-  seq(0, t, by = h)
N <- numeric(length = nSteps + 1)
N[1] <- N0
for (i in 1:nSteps){
dN <- r*N[i]*(1-N[i]/K)
N[i+1] <- N[i] + h*dN
}
return(list(times = times, solution = N))
}
View(EulerResult_0001)
df <- data.frame(solutionValues, logisticSolution[,"N"], EulerResult_01$solution)
View(df)
library(tidyverse)
df <- data.frame(solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames<-`c('a','b','c')
df <- data.frame(solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames`<-c('a','b','c')
df <- data.frame(solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames<-`(c('a','b','c'))
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames<-`(c('times', 'a','b','c'))
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
library(reshape2)
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_01$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
View(df)
View(df)
ggplot(df) +
geom_boxplot(aes(x=times, y=value, color=variable))
df %>% ggplot(aes(x=times, y=value, fill=variable)) +
geom_boxplot()
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_5$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
df %>% ggplot(aes(x=times, y=value, fill=variable)) +
geom_boxplot()
plot(EulerResult_5$times, EulerResult_5$solution, type = 'l', col = 'red')
lines(EulerResult_1$times, EulerResult_1$solution, type = 'l', col = 'orange')
lines(EulerResult_01$times, EulerResult_01$solution, type = 'l', col = 'green')
lines(EulerResult_001$times, EulerResult_001$solution, type = 'l', col = 'blue')
library(reshape2)
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_5$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
View(EulerResult_5)
EulerResult_5[["solution"]]
df <- dplyr::bind_rows(times, solutionValues, logisticSolution[,"N"], EulerResult_5$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
df <- dplyr::bind_rows(times, solutionValues, logisticSolution[,"N"], EulerResult_5$solution)
df <- bind_rows(times, solutionValues, logisticSolution[,"N"], EulerResult_5$solution)
df <- data.frame(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
df <- cbind(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
`colnames<-`(c('times', 'a','b','c')) %>%
melt(., id.vars='times',
measure.vars=c('a','b','c'))
df <- cbind(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution)
df <- bind_cols(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution)
dplyr::bind_cols(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
do.call(qpcR:::cbind.na, dataframe_list)
install.packages('qpcR')
library(qpcR)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
do.call(qpcR:::cbind.na, dataframe_list)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
do.call(qpcR:::cbind.na, dataframe_list)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
do.call(qpcR:::cbind.na)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution)
df <- list(times, solutionValues, logisticSolution[,"N"], EulerResult_1$solution) %>%
do.call(qpcR:::cbind.na, df)
std(EulerResult_5$solution)
st(EulerResult_5$solution)
sd(EulerResult_5$solution)
sd(EulerResult_01$solution)
